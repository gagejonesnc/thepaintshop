/*************************
      BEM Setup
 */

$elementSeparator: '__';
$modifierSeparator: '--';


@function selectorToString($selector) {
  $selector: inspect($selector); //cast to string
  $selector: str-slice($selector, 2, -2); //remove brackets
  @return $selector;
}

@function containsModifier($selector) {
  $selector: selectorToString($selector);
  @if str-index($selector, $modifierSeparator) {
    @return true;
  } @else {
    @return false;
  }
}

@function getBlock($selector) {
  $selector: selectorToString($selector);
  $modifierStart: str-index($selector, $modifierSeparator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

@mixin b($block) {
  .#{$block} {
    @content;
  }
}

@mixin e($element) {
  $selector: &;
  @if containsModifier($selector) {
    $block: getBlock($selector);
    @at-root {
      #{$selector} {
        #{$block+$elementSeparator+$element} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$selector+$elementSeparator+$element} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  @at-root {
    #{&}#{$modifierSeparator+$modifier} {
      @content;
    }
  }
}

/*************************
      MEDIA QUERIES
 */

@mixin respond-to($media) {
  @if $media == s {
    @media only screen and (max-width: 480px) { @content; }
  }
  @else if $media == m {
    @media only screen and (min-width: 481px) and (max-width: 960px) { @content; }
  }
  @else if $media == l {
    @media only screen and (min-width: 961px) { @content; }
  }
  @else if $media == xl {
    @media only screen and (min-width: 1280px) { @content; } //used to fix section positioning
  }
}

/*************************
      COLORS
 */



/*************************
      COLOR OPS
 */



/*************************
      MIXINS & EXTENDS
 */

@mixin angle($pseudo, $angle, $flip: false) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 50%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: -35%;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: -10%;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: -35%;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: -10%;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}
@mixin slantedEdges($deg) {
  .edge--bottom { @include angle(after, $deg); }

  .edge--bottom--reverse { @include angle(after, $deg, true); }

  .edge--top { @include angle(before, $deg); }

  .edge--top--reverse { @include angle(before, $deg, true); }

  .edge--both { @include angle(both, $deg); }

  .edge--both--reverse { @include angle(both, $deg, true); }
}
//make slanted edges responsive
@include respond-to(l) {
  $deg: 2.5deg;
  @include slantedEdges($deg);  }
@include respond-to(m) {
  $deg: 3.25deg;
  @include slantedEdges($deg);  }
@include respond-to(s) {
  $deg: 4.5deg;
  @include slantedEdges($deg);  }


@mixin button {
  display: block;
  padding: 25px;
  background-color: #333;
  color: #fff;
  cursor: pointer;
  margin: 25px auto 0 auto;
  font-weight: 600;
}




/*************************
      STYLES
 */

@include b(cards) {
  display: flex;
  flex-direction: row;
  align-content: center;
  justify-content: space-between;

  @include e(card) {
    margin: 0 auto;
  }
  @include m(child-width-2) {

    @include e(card) {
      width: 40%;
      @include respond-to(s) { width: 75%; }
    }
  }
  @include m(child-width-3) {

    @include e(card) {
      width: 30%;
      @include respond-to(s) { width: 75%; }
    }
  }
}


.main {
  & section {
    z-index: -1;
  }
  & section:nth-child(2n) {
    padding: 100px 0;
    @include respond-to(xl) { padding: 150px 0; }
  }
  z-index: -999;
}

.hero {
  position: relative;
  z-index: -1;
  background-color: #cacaca;

  & svg {
    display: block;
    margin: 0 auto;
    padding-top: 100px;

    @include respond-to(l) { width: 50%;}
    @include respond-to(m) { width: 75%;}
    @include respond-to(s) { width: 90%;}
  }

  & .tagline {
    @include respond-to(s) { font-size: .75em; }
  }

}

.services {
  .subsection {
    padding: 25px 0;
  }
}

